// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String          @unique
  name     String?
  password String
  status   StatusConfirmed @default(pending)

  phoneNumber String?   @map("phone_number")
  city        String?
  gender      String?
  dateOfBirth DateTime? @map("date_of_birth") @db.Date
  age         String?
  hobbies     String[]
  redFlags    String[]

  roles    Role[]     @relation("UserRole")
  UserRole UserRole[]

  meets MeetsUser[]

  @@map("user")
}

model Meets {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title    String
  location String
  datetime DateTime
  status   MeetsStatus @default(pending)

  users MeetsUser[]
}

model MeetsUser {
  meet   Meets  @relation(fields: [meetId], references: [id])
  meetId String @map("meet_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@id([meetId, userId])
}

model Role {
  id          Int    @id @default(autoincrement())
  value       String @unique
  description String
  users       User[] @relation("UserRole")

  UserRole UserRole[]
}

model UserRole {
  id     Int    @id @default(autoincrement())
  roleId Int
  Role   Role   @relation(fields: [roleId], references: [id])
  userId String
  User   User   @relation(fields: [userId], references: [id])
}

enum StatusConfirmed {
  pending
  active
  blocked
}

enum MeetsStatus {
  disable
  pending
  active
  fullactive
}

